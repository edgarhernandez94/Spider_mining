diff --git a/src/CLaserOdometry2DNode.cpp b/src/CLaserOdometry2DNode.cpp
index 030c943..38353b3 100644
--- a/src/CLaserOdometry2DNode.cpp
+++ b/src/CLaserOdometry2DNode.cpp
@@ -43,6 +43,7 @@ public:
   std::string         laser_scan_topic;
   std::string         odom_topic;
   std::string         base_frame_id;
+  std::string         laser_frame_id;
   std::string         odom_frame_id;
   std::string         init_pose_from_topic;
 
@@ -75,6 +76,7 @@ CLaserOdometry2DNode::CLaserOdometry2DNode() :
   pn.param<std::string>("laser_scan_topic",laser_scan_topic,"/laser_scan");
   pn.param<std::string>("odom_topic", odom_topic, "/odom_rf2o");
   pn.param<std::string>("base_frame_id", base_frame_id, "/base_link");
+  pn.param<std::string>("laser_frame_id", laser_frame_id, "laser_link");
   pn.param<std::string>("odom_frame_id", odom_frame_id, "/odom");
   pn.param<bool>("publish_tf", publish_tf, true);
   pn.param<std::string>("init_pose_from_topic", init_pose_from_topic, "/base_pose_ground_truth");
@@ -85,6 +87,7 @@ CLaserOdometry2DNode::CLaserOdometry2DNode() :
   //--------------------------
   odom_pub  = pn.advertise<nav_msgs::Odometry>(odom_topic, 5);
   laser_sub = n.subscribe<sensor_msgs::LaserScan>(laser_scan_topic,1,&CLaserOdometry2DNode::LaserCallBack,this);
+  ros::Duration(5.0).sleep();
 
   //init pose??
   if (init_pose_from_topic != "")
@@ -123,7 +126,8 @@ bool CLaserOdometry2DNode::setLaserPoseFromTf()
   transform.setIdentity();
   try
   {
-    tf_listener.lookupTransform(base_frame_id, last_scan.header.frame_id, ros::Time(0), transform);
+    tf_listener.waitForTransform(base_frame_id, laser_frame_id, ros::Time(), ros::Duration(5.0));
+    tf_listener.lookupTransform(base_frame_id, laser_frame_id, ros::Time(0), transform);
     retrieved = true;
   }
   catch (tf::TransformException &ex)
